TITLE:: LSystemInterpreter
summary:: (put short description here)
categories:: Undocumented classes
related:: Classes/LSystem, Reference/LSystemInterpreterTester

DESCRIPTION::
An LSystemInterpreter can be used to interpret an LSystem. Whereas LSystem is concerned with
string substitution mechanics, an LSystemInterpreter can be used to attach meaning to the symbols,
e.g. to generate a graphical or musical interpretation of the LSystem.


CLASSMETHODS::

METHOD:: new
sets up a new LSystemInterpreter

ARGUMENT:: lsystem
LSystem instance

ARGUMENT:: actions
a mapping of symbols to an array of [action, localstate].
The action is a function taking two arguments: globalstate and localstate. The localstate is an event that can be used to maintain state per symbol. Argument globalstate is an event that every action has access to. It can be used to maintain the state of the
interpreter while iterating over the symbols. With this mechanism it's possible for earlier symbols to influence
the interpretation of later symbols. The localstate is private to one symbol, so e.g. all symbols \X have access to this localstate. Important: each action has to return the new globalstate and localstate. Since it's always possible to create
a per symbol subevent in the global state, perhaps localstate will be removed in the future.
E.g. actions:(\X : {|globalstate,localstate| globalstate[\counter] = globalstate[\counter]+1; [globalstate,localstate]; })

ARGUMENT:: globalstate
an event that can be modified and read by all actions as interpretation of the LSystem is ongoing

returns:: a new LSystemInterpreter instance


INSTANCEMETHODS::

METHOD:: run
goes over all symbols in the LSystem's calculated string and executes the actions associated to the symbols. This is good for systems where you want to evaluate the complete string at once, e.g. to generate a graphical interpretation.

returns:: this

METHOD:: size
returns the number of symbols that will be interpreted

returns:: integer indicating the number of symbols

METHOD:: action
returns the action associated to a symbol

ARGUMENT:: symbol
symbol for which to retrieve the action

returns:: a function taking globalstate and localstate and returning new globalstate and new localstate

METHOD:: step
interprets a single symbol in the lsystem: if an action is associated to the symbol it is executed.

ARGUMENT:: i
the step to interpret

returns:: this

METHOD:: lsystem
returns the lsystem

returns:: an LSystem

METHOD:: actions
returns the mapping from symbols to [action, localstate]

returns:: mapping of symbols to [action, localstate]

METHOD:: setGlobalState
set the globalstate, e.g. used to set up an initial global state before interpretation starts

ARGUMENT:: globalstate
the globalstate

returns:: this

METHOD:: globalstate
global state

returns:: global state

METHOD:: globalState
global state

returns:: global state

METHOD:: updateAction
change the action associated to a symbol (or add a new one if none defined yet)

ARGUMENT:: symbol
symbol for which to update the action

ARGUMENT:: action
action to register

returns:: this

METHOD:: state
returns localstate for a symbol

ARGUMENT:: symbol
symbol for which to look up local state

returns:: local state for the symbol

METHOD:: stepRange
interpret a range of steps in the LSystem

ARGUMENT:: from
first step to interpret

ARGUMENT:: to
last step to interpret

returns:: this

METHOD:: lSystem
returns the configured LSystem

returns:: LSystem instance

METHOD:: init
initializes a new LSystemInterpreter

ARGUMENT:: lsystem
LSystem instance

ARGUMENT:: actions
mapping from symbol to [action, localstate]. Action is a function taking two arguments: globalstate and localstate.
Globalstate is shared between all symbols, whereas localstate is per-symbol. Both Globalstate and Localstate typically are events which can be used as dictionaries. An action has to return the new globalstate and localstate.

ARGUMENT:: globalstate
globalstate which can be used during interpretation

returns:: new LSystemInterpreter instance

METHOD:: setLSystem
set LSystem

ARGUMENT:: lsys
LSystem instance

returns:: this

METHOD:: updateState
update local state for a given symbol

ARGUMENT:: symbol
symbol for which to update local state

ARGUMENT:: state
state to configure

returns:: this

METHOD:: addAction
register an action for a symbol

ARGUMENT:: symbol
symbol for which to register the action

ARGUMENT:: action
the action to register. An action is a function taking two arguments: globalstate and localstate, and returning new globalstate and localstate.

ARGUMENT:: stateobject
local state object to associate to the symbol

returns:: this

METHOD:: setActions
set multiple actions at once

ARGUMENT:: actions
actions to set, e.g.
(
    \X : {|globalstate,localstate| doSomething(globalstate,localstate); [globalstate,localstate]; },
    \Y : {|globalstate,localstate| doSomethingElse(globalstate,localstate); [globalstate,localstate]; },
)

returns:: this


EXAMPLES::

code::
// example where LSystem is interpreted as music generation recipe
// the interpretation contains some randomness. Two interpreters will be running at the same time,
// both interpreting the same LSystem (but the randomness will cause both interpretations to diverge a little)
(
s.waitForBoot({
    var player;
    var lsys = LSystem(
        iterations:4,
        axiom:"FX",
        constants:Set[],
        rules:(\X : "X+YF+",
            \Y : "-FX-Y"));
    var interp = LSystemInterpreter(
        lsystem:lsys,
        globalstate:(
            \acceptablenotes : Set["c3", "d3", "e3", "g3", "a3", "c4", "d4", "e4", "g4", "a4"],
            \patternnotes : ["c3"],
            \transpose : 0,
            \tempo : 16,
        ),
        actions:(
            // whenever you encounter an F, extend the list of played notes
            'F' : [{ | glob, loc |
                // extend list notes being played (using some randomness :) )
                glob[\patternnotes] = glob[\patternnotes].add(glob[\acceptablenotes].choose.debug("add new note"));

                // always return state at the end
                [glob, loc];
            }, nil],
            // whenever you encounter a +, transpose up
            '+': [{ | glob, loc |
                glob[\transpose] = (glob[\transpose] + [1,2,3,4].choose.debug("transpose up")).clip(-12,12);
                // always return state at the end
                [glob, loc];
            }, nil],
            // whenever you encounter a -, transpose down
            '-': [{ | glob, loc |
                "transpose down".postln;
                glob[\transpose] = (glob[\transpose] - [1,2,3,4].choose.debug("transpose down")).clip(-12, 12);
                // always return state at the end
                [glob, loc];
            }, nil],
            // whenever you encounter an X, remove first note from the played notes
            'X' : [{ | glob, loc |
                "remove first note".postln;
                if (glob[\patternnotes].size > 1) {
                    // keep at least one note
                    glob[\patternnotes] = glob[\patternnotes].reverse;
                    glob[\patternnotes].pop;
                    glob[\patternnotes] = glob[\patternnotes].reverse;
                };
                // always return state at the end
                [glob, loc];
            }, nil],
            // whenever you encounter a Y, change tempo (randomly) )
            'Y' : [{ | glob, loc |
                glob[\tempo] = (glob[\tempo] * [0.3, 2, 0.5, 3].choose.debug("tempo factor")).clip(8,32);
                // always return state at the end
                [glob, loc];
            }, nil],
        )
    );

    var interp2 = interp.deepCopy();

    SynthDef(\kalimba, {
        |out = 0, freq = 440, amp = 0.1, mix = 0.1|
        var snd, click;
        // Basic tone is a SinOsc
        snd = SinOsc.ar(freq) * EnvGen.ar(Env.perc(0.03, Rand(3.0, 4.0), 1, -7), doneAction: 2);
        snd = HPF.ar( LPF.ar(snd, 380), 120);
        // The "clicking" sounds are modeled with a bank of resonators excited by enveloped white noise
        click = DynKlank.ar(`[
            // the resonant frequencies are randomized a little to add variation
            // there are two high resonant freqs and one quiet "bass" freq to give it some depth
            [240*ExpRand(0.97, 1.02), 2020*ExpRand(0.97, 1.02), 3151*ExpRand(0.97, 1.02)],
            [-9, 0, -5].dbamp,
            [0.8, 0.07, 0.08]
        ], BPF.ar(PinkNoise.ar, 6500, 0.1) * EnvGen.ar(Env.perc(0.001, 0.01))) * 0.1;
        snd = (snd*mix) + (click*(1-mix));
        snd = Mix( snd );
        Out.ar(out, Pan2.ar(snd, 0, amp));
    }).add;

    SynthDef(\flute, {
		| out = 0, freq = 440, amp = 1.0, a = 0.1, r = 0.1|
		//var fmod = 1; // clean
		//var fmod = LFCub.kr(freq:1/12).range(1, LFNoise2.kr(freq:12.0).range(1,1.1)); // tone deaf flute
		var fmod = LFCub.kr(freq:1/12).range(1, LFNoise2.kr(freq:12.0).range(1,1.02)); // flute-like sound
		var env = EnvGen.ar(Env.perc(a, r), levelScale:0.5, doneAction:2);
		var snd = SinOsc.ar(freq * fmod)!2;
		Out.ar(bus:out, channelsArray:(env*(amp*snd).tanh));
	}).add;

    s.sync;

    fork {
        var skipfirstidx = 0; // increase to skip more steps at the beginning
        var sz = lsys.getCalculatedString.size();
        lsys.getCalculatedString.do({
            | chr, idx |
            var pattern;
            var transposedpattern;
            var transposition;
            var transposition2;
            ("*** PART" + (idx+1) + "OF" + sz + "***").postln;
            interp.step(idx);
            interp2.step(idx);
            // start playing from step skipfirstidx
            if (idx > skipfirstidx) {
                var repeats = inf;
                if (idx == (sz-1)) { repeats = 3; }; // don't repeat last pattern indefinitely
                transposition = interp.globalState()[\transpose].debug("transpose");
                transposition2 = interp2.globalState()[\transpose].debug("transpose2");
                pattern = Pn(
                    Ppar([
                        Padd(\midinote, Pfunc({transposition}),
                            Panola.new(
                                notation:interp.globalState()[\patternnotes].join(" ").debug("notes1"),
                                dur_default:interp.globalState()[\tempo]
                            ).asPbind(\kalimba)
                        ),
                        Padd(\midinote, Pfunc({transposition2}),
                            Panola.new(
                                notation:interp2.globalState()[\patternnotes].join(" ").debug("notes2"),
                                dur_default:interp2.globalState()[\tempo]/2,
                                playdur_default:1,
                                vol_default:0.1
                            ).asPbind(\flute),
                        )
                    ]),
                    repeats);
                if (player.notNil) { player.stop; };
                player = pattern.play();
                1.wait;
                if (idx == (sz-1)) {
                    "*** ABOUT TO FINISH ***".postln;
                };
            }
        });
    }
});
)

// example where the same lsystem (but with more iterations) is interpreted as a graphical representation
(
var win = Window("Example Graphical LSystem", bounds:Rect(0,0,1000,700));
var view = UserView(win, win.view.bounds.insetBy(50,50));
var lsys = LSystem(
    iterations:12,
    axiom:"FX",
    constants:Set[],
    rules:(\X : "X+YF+",
        \Y : "-FX-Y"));
var interp = LSystemInterpreter(
    lsystem:lsys,
    actions:(
        'F' : [{
            | globalstate, symbolstate |
            globalstate[\pos] = globalstate[\pos] + (globalstate[\dir]*globalstate[\len]);
            Pen.lineTo(globalstate[\pos]);
            [globalstate, symbolstate];
        }, nil],
        'X' : [{
            | globalstate, symbolstate |
            globalstate[\pos] = globalstate[\pos] + (globalstate[\dir]*globalstate[\len]);
            Pen.lineTo(globalstate[\pos]);
            [globalstate, symbolstate];
        }, nil],
        'Y' : [{
            | globalstate, symbolstate |
            globalstate[\pos] = globalstate[\pos] + (globalstate[\dir]*globalstate[\len]);
            Pen.lineTo(globalstate[\pos]);
            [globalstate, symbolstate];
        }, nil],
        '-' : [{| globalstate, symbolstate |
            globalstate[\dir] = (globalstate[\dir].rotate(globalstate[\angle].degrad));
            [globalstate, symbolstate];
        }, nil],
        '+' : [{| globalstate, symbolstate |
            globalstate[\dir] = (globalstate[\dir].rotate(globalstate[\angle].neg.degrad));
            [globalstate, symbolstate];
        }, nil]
    )
);

view.resize = 5;
view.background_(Color.white);
view.drawFunc_({
    |userview|
    Pen.use {
        interp.setGlobalState( globalstate:(
            \dir : 0@1.neg,
            \pos : (win.view.bounds.width/2)@(win.view.bounds.height/5),
            \len : 3,
            \angle: 90 ) );
        Pen.width = 2;
        Pen.strokeColor_(Color.black);
        Pen.fillColor_(Color.black);
        Pen.moveTo(interp.globalstate[\pos]);
        interp.run();
        Pen.stroke;
    };
});
win.front;
)
::

